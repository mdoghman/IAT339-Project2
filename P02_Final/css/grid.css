
*, *::after, *::before {
	box-sizing: border-box;
}


/*--------------center all columns on the page -----------------------*/

[class^='col-'] {
	
	/*
		Floating an element removes it from the regular flow of elements on the page. In this case we are telling all of our grid-col- elements to float to the left of the rest of the content. This allows them to wrap next to one another on the page.
	*/

	margin-left: auto;
	margin-right: auto;
	
}


/*--------------set default grid column width -----------------------*/


.col-1of6 {
	width: 16.66%;
	vertical-align: text-top;
}

.col-2of6 {
	width: 33%;
}

.col-3of6 {
	width: 50%;
}

.col-4of6{
	width: 66.66%;

}

.col-5of6 {
	width: 83.33%;
}

.col-6of6 {
	width: 100%;
}
/*
	To ensure that our grid's rows don't overlap and flow into one another, we need to use the "::after" pseudo-element to inject a bit of content to clear our floats when the row ends. 
*/
.grid-row::after {

	/*
		We use the 'content' property to make the ::after pseudo-element active. Even though there is nothing between the quotation marks, this enables the element.
	*/
	content: "";
	
	/*
		To allow the element to clear the floats, we have to set it to display as a block-level element.
	*/
	display: block;

	/*
		Finally, using the 'clear' property we can ensure that floats are cleared. This prevents elements after .grid-row from wrapping up beside elements in the row.
	*/
	clear: both;
}



/*--------------media query for medium size (tablet)-----------------------*/

@media (max-width: 47.7em) {

	.col-1of6 {
		width: 45%;
	
	}

	.col-3of6 {
		width: 75%;
	}

	.col-2of6 {
		width: 100%;
	}

	.col-4of6 { 
	width: 100%; 
	}



	.about-image {
		margin-top: 1em;
	}

	/*
		Below we change the sizing of our columns in the main content (image and text) so that they are positioned next to one another in even 50% width columns.
	*/
	.grid-col-1of2 {
		width: 50%;
	}

	/*
		We can use the ':last-of-type' selector to pick the last column and add some padding on the left. This allows us to create a bit of space between the two columns.
	*/
	.grid-col-1of2:last-of-type {
		padding-left: 1rem;
	}

	p {
		font-size: 1.2rem;
	}

		h2.text-heading {
		font-size: 1.4em;
		padding-top: 0.8em;
	}
	/*
		The navigation grid starts to span some of the window with the statement below.
	*/
	.grid-col-1of6 {
		width: 100%;
	}

	.footer-text {
		width:100%;
	}
}

/*--------------media query for smartphone (re-size grid) -----------------------*/

@media (max-width: 23.75em) {

	/*
		Below we change the sizing of our columns in the main content (image and text) so that they are positioned next to one another in even 50% width columns.
	*/
	.col-1of6 {
		width: 50%;
		clear: both;
	}

	.col-3of6 {
	
		margin-bottom: 2em;
	}

	.header-img {
		width: 100%;
		float: none;
		text-align: center;
		display: block;
		margin-right: auto;
		margin-left: auto;
	}

	.header-text {
		text-align: center;
	}


	.col-2of6 {
		width: 100%;
	}

	/*
		We can use the ':last-of-type' selector to pick the last column and add some padding on the left. This allows us to create a bit of space between the two columns.
	*/
	.col-3of6:last-of-type {
		padding-left: 1rem;
	}

	/*
		The navigation grid starts to span some of the window with the statement below.
	*/
	.grid-col-1of4 {
		width: 50%;
	}

		p{
		font-size: 0.9rem;
	}

	h2.text-heading {
		font-size: 1em;
	}



}




/*--------------media query for larger screen (re-size grid) -----------------------*/
@media (min-width: 62em) {

	.grid-col-2of3 {
		width: 66.666%;
	}

	.grid-col-1of3 {
		width: 33.333%;
		padding-left: 1rem;
	}



}





